r <- topRunner

-- Initialization check

r $ shapes (float 3) (float 0.3 !+ volc) (float 0.3)
  & repeatT (float 30)
  & translatex (seconds !* float 0.1)

-------------------------------------------------------------------------
-- For shows

r $ sineT seconds (float 1) (float 1)

r $ sineT seconds (chopChanName "s8" $ oscin 9000) (float 0.9)

r $ addops [sineT seconds (float 2 !+ (sincycle 1 1 !* float 2)) (volc), sineT seconds (float 2 !+ ((sincycle 1 1 !* float 1.33))) (volc) & translatey (float 0.3)]
  & littleplanet
  & fade (float 0.95)

r $ triggerops (constC [sincycle 1 1])
  [ sineT seconds (float 2 !+ (sincycle 1 1 !* float 2)) (volc)
  , adata (float 1)
  ]

r $ vidIn

let camT = compT' (topResolution .~ iv2 (1920, 1080)) 0 [vidIn]

let ndiops t = overops [ ndiinT ""
                       , t
                       ]

let commandCode t = textT' ( (topResolution .~ (Just $ int 1920, Just $ int 1080))
                           . (textFontSize ?~ float 62)
                           . (textAlign .~ iv2 (0, 2))
                           ) (str t)

r $ addops [ commandCode {Command}
             & translatex (seconds !* float 0.2)
           , adata (float 1)
             & fade (float 0.95)
           ]
           & transformscale (Just $ float 2, Just $ float 2) 0


r $ addops [ adata (float 0.5)
             & translatey (volc !* float 0.6)
             & rotate (float 45)
             & mirror
             & val (float 1.5)
             & rotate (float 45 !* seconds)
             & scalexy (float 0.7)
             & palettecycle buddhist (seconds !* float 0.4)
             & fade (float 0.97)
             & val (float 1 !+ (volc !* float (-1.5)))
           , flocking (float 0.5, float 4 !* volc) (float 0.5)
             & fade (float 0.8 !* volc !+ float 0.3)
             & palettemap buddhist ((seconds !* float 0.4) !+ float 0.5)
             & val (volc !* float 3)
           ]



addops [ adata (float 0.7) & translatey (float 0.3 !* seconds) & palettecycle neon (seconds !* float 0.5) & fade ((volc !* float 0.3) !+ float 0.6)
           , adata (float 1) & mosaic (seconds) (float 80)
           , adata (float 1) & translatey (float (-0.4) !* seconds) & edges & noisedisplace (volc !* float 10) & val (float 0.3)
           ]
      & fade' id (scalexy (float 0.01 !* volc)) (sincycle 1.3 0.38 !+ float 0.6)

addops [ addops [ adata (float 4)
                      & rotate (float (45))
                      & translatex (seconds !* float 0.2)
                      , adata (float 4)
                        & rotate (float (-45))
                      ]
                      & mirror
                      & noisedisplace (lowvc !* float 10)
                      & fade (float 0.7)
                      & palettemap buddhist (float 0)
                      & val ((lowvc !* float 0.9))
                    , shapes (float 2) ((float 0.8 !* volc) !+ float 0.1) (float 0.2 !+ (volc !* float (-0.2) ))
                      & translatey ((seconds !* float 0.3) !+ volc)
                      & littleplanet
                      & fade' id (repeatT (float 0.999)) (float 0.9)
                    ]



flocking (float 1, float 3 !* volc) (float 3 !* volc)
              & fade ((volc !* float 0.85) !+ float 0.5)
              & mirror
              & edges
              & lumidots
              & noisedisplace (volc !* float 32)
              & val (volc !* float 4)
              & fade (float 0.8)


  addops [
  shapes (float 2 !+ (lowvc !* float 3)) ((volc !* float 1.3) !+ float 0.2) (float 0.2)
           & repeatT (scycle (-0.4) 10 !+ (volc !* float 2))
         , adata (float 1)
           & val (float 0)
           & translate (sincycle 0.4 (-0.1), float 0.3 !* seconds)
           & mirror
         ]
         & val (float 0)
         & fade' id (repeatT (float 1.01) . translatex (sincycle 0.4 0.01)) (float 0.8 !+ (volc !* float 0.2))



r $ ndiops $
  adata (float 1) & val (float 1)
  & translatey (volc !* float (0.5) !+ (seconds !* float 0.3))
  & repeatT (float 3)
  & littleplanet
  & repeatT (float 2)
  & fade' id (scalexy (float (0.04) !* volc)) (float 0.95)
  & translatex (float 0.5)
  & scalexy (float 1.5 !* (float 2 !+ (lowvc !* float (-0.5))))
  & blur (float 8)
  & edges
  & mirror
  & palettemap fire (volc)
  & val (float 0.3)
  & fade (float 0.8)
  
r $ adata (float 1.3)
    & noisedisplace (lowvc !* float 100)
    & translate (seconds !* float 0.1 !+ (volc !* float 2), seconds !* float 0.3)
    & mirror
    & repeatT (float 3)
    & fade' id (littleplanet . translate (float 0.1 !* seconds, float (0.01))) (float 0.97)
    & mirror
    & repeatT (float 0.7)


r $ triggerops (constC $ [ volc !* float 4 ] )
  [adata (float 2)
    & translatey (scycle 0.3 0.8)
    & mirror
    & fade (float 0.9)
  , adata (float 1)
    & noisedisplace (lowvc !* float 100)
    & translate (seconds !* float 0.1 !+ (volc !* float 2), seconds !* float 0.3)
    & mirror
    & repeatT (float 3)
    & fade' id (littleplanet . translate (float 0.1 !* seconds, float (0.01))) (float 0.97)
    & mirror
    & repeatT (float 0.7)
  ]


r $ flocking (float 0.5, lowvc) (float 0.4 !+ (volc !* float 4))
  & fade (float 0.97)
  & palettemap neon (seconds !* float 0.3) 
  & val (float 1.5)







r $ shapes ((volc !* float 4) !+ float 2) (float 0.3) (float 0.3)
    & fade (lowvc !* float 0.3 !+ float 0.3)
    & palettemap fire (float 0.3 !* seconds)
    & val (float 0.2)
    & blur (float 32)
    & val (float 4)
    & noisedisplace (lowvc !* float 10)



let comp = constC [float 0]

let comp = tox "toxes/relay.tox" [] (Just $ mergeC [constC [mchan "b1"], count' ((countThresh ?~ mchan "s1a" !* float 0.05) .
                                     (countLimMax ?~ float 1) .
                                     (countLimType ?~ int 1)
                                    ) highv, count' ((countThresh ?~ mchan "s1b") .
                                     (countLimMax ?~ float 1) .
                                     (countLimType ?~ int 1)
                                    ) lowv, count' ((countThresh ?~ mchan "s1c" !* float 0.5) .
                                     (countLimMax ?~ float 1) .
                                     (countLimType ?~ int 1)
                                    ) volume])

let v3 (x, y, z) = (Just x, Just y, Just z)

r $ geoT emptyV3 (v3 (float 1.5, float 1.5, float 1.5)) (adata (float 1) & fade (float 0.96)) sphere

r . (\t -> (comp, t)) $ adata (float 1)

r $ addops [adatat 0.4 0.2 , adatat 1.5 0.2]
  & translate (seconds !* float 0.1, float 0)
  & mirror
  & edges
  & val (float 0.5)
  & translate (seconds !* float 0.1, float 0)
  & littleplanet
  & repeatT ((sincycle 0.6 2.3 !+ float 0.5) !+ volc)
  & translate (float 0.2 !* seconds, float 0.1)
  & mirror
  & palettecycle buddhist (sincycle 0.7 0.3 !+ float 0)
  & fade (float 0.9)
  & val (float 1.5)

r $ shapes (float 3) (float 0.3) (float 0.3)
  & fade (float 0.95)
  & repeatT (float 30)
  & translatex (seconds !* float 0.1)

r $ addops [adatat 0.3 0.5 & rotate (float 45), adatat 0.5 0.5 & rotate (float (-45)), adatat 1.5 0.5]
  & repeatT (float 10)
  & translatey (float (-0.1))
  & fade (float 0.9)
  & palettemap neon (sincycle 0.05 1)
  & val (float 0.2)
  & fade (float 0.8)

r $ sphereNoise

r $ addops [adata (float 0.3) & translatey (float (-0.2)), adata (float 0.3) & translatey (float 0.3)]
  & littleplanet
  & fade' id (scalexy (float 0.03 !* volc)) (float 0.98)
  & palettemap fire (sincycle 0.2 1)
  & blur (float 8)
  & scalexy (float 0.7)
  & val (float 2)

let adatat x y = adata (float y) & translatey (float x !* float 0.5)

r $ addops [ adatat 0.3 0.5 & palettecycle buddhist (sincycle 0.4 1)
           , adatat 0 1 & palettecycle neon (seconds !* float 0.3)
           , adatat 0.6 1.3 & mosaic seconds (float 60)
           ]
  & littleplanet
  & scalexy (float 0.5)
  & fade (float 0.95)

r $ addops [ adata (float 1) & translatey (float 0.3) & littleplanet & translatex (float 0.2) & translatey (float 0.2)
           , adata (float 1) & littleplanet & translatex (seconds !* float (-0.2))
           , adata (float 1) & littleplanet & translatex (float (0.2)) & translatey (seconds !* float (-0.2))
           ]
  & palettecycle neon (seconds !* float 0.5)
  & fade' id ((scalexy (float (0.04) !* volc)) . (translatey (float 0.01))) (float 0.95)
  & translatex (seconds !* float 0.2)
  & mirror

r $ addops [adata (float 1) & repeatT (float 2), adata (float 1) & repeatT (float 2) & rotate (float 90)]
  & rotate (mchan "b1" !* float 45)
  & translate (float 0, float 0)
  & fade' id ((scalexy (float (0.05) !* lowvc)) . (translatey (float (0.005)))) (float 0.5 !+ (float 0.5 !* mchan "s1"))
  & sat (float 1.1)
  & val (float 1.8)


let adatat x y = adata (float y) & translatey (scycle x 1)

r $ shapes (float 2 !+ (float 10 !* volc)) (float 0.6 !* volc) (float 0.3)
  & repeatT ((sincycle (-0.3) 15 !+ float 1) !+ (volc !* float 4))
  & rotate (float 60 !* seconds)
  & palettecycle neon (seconds !* float 0.3)
  & fade (float 0.9)
  & translatex ((seconds !* float 0.2))
  & mirror



let churchmap = movie (float 0) "church.png" & transformT' ((transformExtend ?~ int 2) . (transformTranslate .~ (Just $ float 0.002, Just $ float (-0.04))))



r $ multops
    [ churchmap & blur (float 4) & val (float 4)
    , flocking (float 0.5, float 4) (float 3.1) & fade (float 0.95)
    ]
  & palettecycle neon
  & fade' id (scalexy (lowvc !* float 0.04)) (float 0.93)
  & val (float 10)

r $ adata (float 1)
  & val (float 0)

r $ movie ((lowvc !+ seconds) !* float 30 !+ float 1800) "highway.mp4" & edges & val (mchan "b1")
  

r $ addops [movie (float 60 !+ (lowvc !* float 300)) "Purple flowers.mp4"
  & edges
  & mirror
  & fade (mchan "s1")
  , adata (float 1) & palettecycle fire & translate (Just $ float 0, Just $ float 0.5) & val (mchan "b1")
    & fade' id (scalexy (float (-0.02) !* lowvc)) (lowvc !* float 2)
  ]

-- Purple flowers bass start

r $ movie (float 60 !+ (lowvc !* float 360)) "Purple flowers.mp4"
  & fade (volc !* float 5)

-- abstract adata rotating

let adatat x y = adata (float (y * 0.2)) & translatey (scycle x 1) & rotate (float (x * 180) !* seconds)

r $ addops [adatat 0.3 0.5, adatat 0.5 1, adatat 0.7 1.3, adatat 1.5 1.3]
  & fade (float 0.97)
  & palettemap buddhist (float 0.2 !* seconds)
  & val (float 0.3)
  & fade' id (scalexy (float 0.02 !* volc)) (float 0.7)

-- chaos adata

r $ adata (float 1)
  & noisedisplace (lowvc !* float 100)
  & translatex (seconds !* float 0.1 !+ (volc !* float 2))
  & mirror
  & repeatT (float 3)
  & palettecycle buddhist (seconds !* float 0.3)
  & val (float 1.3)
  & fade' id (littleplanet . translate (float 0.1 !* seconds, float (0.01))) (float 0.97)
  & mirror
  & repeatT (float 0.7)

-- up fade

r $ addops [adata (float 1)
  & littleplanet, 
    adata (float 1)
      & translatey (float 0)
      & rotate (float 0)
    ]
  & val (lowvc !* float (4))
  & translatey (float (-0.2))
  & repeatT (float 0.4)
  & fade' id (scalexy (volc !* float (-0.04)) . translatey (float 0.02)) (float 0.99)
  & palettemap neon ((volc !* float 0.3) !+ (seconds !* float 0.4))
  & val (float 0.4)
  & fade (float 0.7)

r $ ndiops $ flocking (float 1, float 3 !* volc) (float 3 !* volc)
             & fade (float 0.95)
             & edges
             & noisedisplace (volc !* float 16)
             & palettemap neon (seconds !* float 0.6)
             & val (volc !* float 4)
             & fade (float 0.8)


r $ ndiops $ multops [ stringtheory (volc !* float 0.4) (volc)
                       & edges
                       & translatex (seconds !* float 0.2)
                       & repeatT (float 3)
                       & fade (float 0.95 !+ (lowvc !* float (-0.2)))
                       & translatey (seconds !* float 0.3)
                       & littleplanet
                       & scalexy (float 0.7)
                     , lines (float 0.4 !* volc) (float 0.2)
                       & fade (float 0.95)
                       & translatex (seconds !* float 0.2)
                       & mirror
                     ]

r $ addops [ adata (float 0.5)
             & translatey (volc !* float 0.6)
             & rotate (float 45)
             & mirror
             & val (float 1.5)
             & rotate (float 45 !* seconds)
             & scalexy (float 0.7)
             & palettecycle buddhist (seconds !* float 0.4)
             & fade (float 0.97)
             & val (float 1 !+ (volc !* float (-1.5)))
           , flocking (float 0.5, float 4 !* volc) (float 0.5)
             & fade (float 0.8 !* volc !+ float 0.3)
             & palettemap buddhist ((seconds !* float 0.4) !+ float 0.5)
             & val (volc !* float 3)
           ]
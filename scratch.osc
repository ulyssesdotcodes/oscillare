r <- topRunner

r <- compRunner

-- Initialization check

r $ shapes (float 3) (float 0.3 !+ volc) (float 0.3)
  & repeatTxy (float 30)
  & translatex (seconds !* float 0.1)

-------------------------------------------------------------------------
-- For shows

r $ addops
  [ commandCode {Command}
    & translatex' (transformExtend ?~ int 0) (float (0.03))
    & translatey' (transformExtend ?~ int 0) (float (0.03))
  , spiralGeo (int 80) (seconds) (sidesTorus (int 8) (lagmod 0.5 $ volc !* float 3))
    & translate (float 0.12, float 0.1)
    & scalexy (float 0.7)
  ]
  & levelT' (levelInvert ?~ float 1)

r $ addops [ commandCode {Command}
           , multops
            [ adata (float 1)
              & rotate (float 30 !* seconds)
              & translatex (seconds !* float 0.7 !+ lowvc)
              & edges
              & fade (float 0.96)
              & palettemap buddhist (seconds !* float 5)
            , shapes ((seconds !% float 8) !+ float 3) (volc !* float 6) (float 0.1)
              & repeatTxy (float 10)
              & translatey (seconds !* float 0.7)
              & littleplanet
              & rotate (float 120 !* seconds)
              & palettecycle buddhist (volc !* float 4)
              & fade (float 0.8)
              & littleplanet
              & scalexy (float 0.7)
              & rotate (float 90 !* seconds)
              & translatex (((chan0f $ lmp 0 "tx") !* float 0.001) !* seconds)
              & fade' id (scalexy $ float 0.4 !- (chan0f $ lmp 0 "ty")) (float 0.96)
            ]
           ]



let
  tsnenum n = ((lowvc !* chanf (n * 5) tsne) !+ (volc !* chanf (n * 5 + 1) tsne) !+ (seconds !* chanf (n * 5 + 2) tsne)) !% chanf (n * 5 + 4) tsne !+ chanf (n * 5 + 3) tsne
  tsneoutput = tableF "../tsneoutput.txt"
               & scriptD "scripts/distance_dat.py" . (:[tsnepos])
               & datToC' (datToChopFirstColumn ?~ int 2)
               & expressionC [(PyExpr "max(0, sorted(map(float, me.inputs[0].chans()))[-4] - me.inputVal)")] . (:[])
               & expressionC [(PyExpr "math.sqrt((max(map(float, me.inputs[0].chans())) - me.inputVal) % max(map(float, me.inputs[0].chans())))")] . (:[])
               & expressionC [(PyExpr "me.inputVal / sum(map(float, me.inputs[0].chans()))")] . (:[])
  tsnedata = tableF "../tsnedata.txt" & datToC' (datToChopFirstColumn ?~ int 2)
  tsnepos = chopToD $ expressionC [PyExpr "me.inputVal * (max(me.inputs[0][me.chanIndex].vals) - min(me.inputs[0][me.chanIndex].vals)) + min(me.inputs[0][me.chanIndex].vals)"] [constC [mchan "s1", mchan "s2"]]
  tsne = expressionC [(PyExpr "me.inputs[1][me.chanIndex] * me.inputVal")] [tsnedata, tsneoutput]
            & math' (mathCombChans ?~ int 1) . (:[])
            & shuffleC (int 1)
in 
  r $ fadeops ((tsnenum 0) !* float 3)
        [ shapes (tsnenum 1) (tsnenum 2) (float 0.2)
        , adata (float 1)
        , lines (tsnenum 3) (tsnenum 4)
        ]
      & translate (tsnenum 13, tsnenum 14)
      & clone (tsnenum 5) (tsnenum 6, tsnenum 7) (tsnenum 8, tsnenum 9)
      & repeatTxy (tsnenum 10)
      & palettecycle neon (tsnenum 11)
      & fade (tsnenum 12)


-- lmf flocking
r $ flocking (float 1, float 3 !* volc !* (float 0.2 !+ lmp0 0 "tx")) (float 1 !* (float 1 !- (float 2 !* lmp0 0 "ty")))
      & fade (float 0.95)

-- lmf trigger
r $ addops [commandCode {Command}
           , triggerops lms [
             addops [spiralGeo (int 100) (seconds) (sidesTorus (int 8) (volc !* float 10)) & palettecycle neon seconds, spiralGeo (int 100) (seconds !* float (-1)) (sphere) & palettecycle neon (seconds !+ float 0.5)]
             & fade' id (translatex $ lmp0 0 "tx" !* float 0.1) (float 0.95)
             , addops [ adata (float 0.7) & translatey (float 0.3 !* seconds) & palettecycle neon (seconds !* float 0.5) & fade ((volc !* float 0.3) !+ float 0.6)
                     , adata (float 1) & mosaic (seconds) (float 80)
                     , adata (float 1) & translatey (float (-0.4) !* seconds) & edges & noisedisplace (volc !* float 10) & val (float 0.3)
                     ]
                 & fade' id (scalexy (float 0.01 !* volc !+ float 1)) (float 0.9)
             , flocking (float 0.5, float 3 !* volc !* (float 0.2 !+ lmp0 0 "tx")) (float 1 !* (float 1 !- (float 2 !* lmp0 0 "ty")))
                 & fade (float 0.95)
             ]
           ]
           
-- LED light check

r $ 
  ( constC' (constCEndFrames ?~ int 450) [seconds !% float 1]
  , shapes (float 3) (float 0.3 !+ volc) (float 0.3)
    & repeatTxy (float 30)
    & translatex (seconds !* float 0.1)
  )
  
-- LED stuff  
let colorconst f = constC' (constCEndFrames ?~ int 151) [f]

let ledswitch n t = constled (castf $ (chan0f $ triggercount t 2) !== float n) 15

let rgbledswitch f = rgbled (ledswitch 0 f) (ledswitch 1 f) (ledswitch 2 f)

r $ shapes (float 3) (float 0.3 !+ volc) (float 0.3)
    & repeatTxy (float 30)
    & translatex (seconds !* float 0.1)
    & translatey (seconds !* float 0.02)
    & palettecycle buddhist (float 0.2 !* seconds)
    & bottomLedSplit 150

    & crop' ((cropTop ?~ float 0.92))
    & topToC
    & selectC' (selectCNames ?~ str "r g b")
    & stretchC (int 150)
    & shuffleC (int 6)
  , shapes (float 3) (float 0.3 !+ volc) (float 0.3)
    & repeatTxy (float 30)
    & translatex (seconds !* float 0.1)
    & translatey (seconds !* float 0.02)
    & fade (float 0.96)
    & palettemap buddhist (float 0.2 !* seconds)
  )


    & math' (mathCombChops ?~ int 3) . (:[ain & stretchC (int 451) ])

  
-- Rotating adatas
let
  adatat x y = adata (float (y * 0.2)) & translatey ((x !* seconds) !% float 1) & rotate (x !* float 180 !* seconds)
  tsnevals = [ [ 0 ,  0 ,  0 ,  0.97 ] -- fade
             , [ 0 ,  0 ,  0.2 ,  0 ] -- palette
             , [ 0 ,  0 ,  0 ,  0.3] -- val
             , [ 0 ,  -0.02 ,  0 ,  0 ] -- fade scale
             , [ 0 ,  0 ,  0 ,  0.7 ] -- fade final
             ]
  -- tsne = mergeC $ zipWith (\i ns -> fix (BS.pack $ "tsne" ++ show i) $ constC $ float <$> ns) [0..] tsnevals
  tsnenummod n = ((lowvc !* chanf (n * 5) tsne) !+ (volc !* chanf (n * 5 + 1) tsne) !+ (seconds !* chanf (n * 5 + 2) tsne)) !% chanf (n * 5 + 4) tsne !+ chanf (n * 5 + 3) tsne
  tsnenum n = ((lowvc !* chanf (n * 4) tsne) !+ (volc !* chanf (n * 4 + 1) tsne) !+ (seconds !* chanf (n * 4 + 2) tsne)) !+ chanf (n * 4 + 3) tsne
  tsneoutput = tableF "../tsnerotatingoutput.txt"
               & scriptD "scripts/distance_dat.py" . (:[tsnepos])
               & datToC' (datToChopFirstColumn ?~ int 2)
               & expressionC [(PyExpr "max(0, sorted(map(float, me.inputs[0].chans()))[-1] - me.inputVal)")] . (:[])
               & expressionC [(PyExpr "math.sqrt((max(map(float, me.inputs[0].chans())) - me.inputVal) % max(map(float, me.inputs[0].chans())))")] . (:[])
               & expressionC [(PyExpr "me.inputVal / sum(map(float, me.inputs[0].chans()))")] . (:[])
  tsnedata = tableF "../tsnerotatingdata.txt" & datToC' (datToChopFirstColumn ?~ int 2)
  tsnepos = chopToD $ expressionC [PyExpr "me.inputVal * (max(me.inputs[0][me.chanIndex].vals) - min(me.inputs[0][me.chanIndex].vals)) + min(me.inputs[0][me.chanIndex].vals)"] [constC [mchan "s1", mchan "s2"]]
  tsne = expressionC [(PyExpr "me.inputs[1][me.chanIndex] * me.inputVal")] [tsnedata, tsneoutput]
            & math' (mathCombChans ?~ int 1) . (:[])
            & shuffleC (int 1)
in 
  r $ addops [adatat (float 0.3) 0.5, adatat (float 0.5) 1, adatat (float 0.7) 1.3, adatat (float 1.3) 1.3]
    & fade (tsnenum 0)
    & palettemap buddhist (tsnenum 1)
    & val (tsnenum 2)
    & fade' id (scalexy (tsnenum 3 !+ float 1)) (tsnenum 4)


let camT = compT' (topResolution .~ iv2 (1920, 1080)) 0 [vidIn]

let ndiops t = overops [ ndiinT ""
                       , t
                       ]

let v3 x y z = (Just x, Just y, Just z)

r $ particlemover (volc !* float 2) (lowvc !* float 1) fire (asphere & transformS' ((transformSTranslate .~ v3 ((mnoisec (seconds !* float 3) 10) !* float 2) ((mnoisec (seconds !* float 3) 20) !* float 1.5 !+ float (-1)) (float  0)) . (transformSUniformScale ?~ float 0.8)))

-- counter circling geos
r $ addops [spiralGeo (int 100) (seconds) (sidesTorus (int 8) (volc !* float 10)) & palettecycle neon seconds, spiralGeo (int 100) (seconds !* float (-1)) (sphere) & palettecycle neon (seconds !+ float 0.5)]

-- command code aspectex adata

r $ addops [ commandCode {Command}
           , showwork (tdata (float 1) aspecttex)
              [ translatey (float 0.1)
              , mirror
              , fade (float 0.9)
              ]
           ]

-- Crossing adatas
r $ addops [ adata (float 0.7) & translatey (float 0.3 !* seconds) & palettecycle neon (seconds !* float 0.5) & fade ((volc !* float 0.3) !+ float 0.6)
           , adata (float 1) & mosaic (seconds) (float 80)
           , adata (float 1) & translatey (float (-0.4) !* seconds) & edges & noisedisplace (volc !* float 10) & val (float 0.3)
           ]
      & fade' id (scalexy (float 0.01 !* volc !+ float 1)) (float 0.9)


-- relay
let comp = constC [float 0, float 0, float 0, float 0]

let comp = tox "toxes/relay.tox" [] (Just $ mergeC [constC [float 1], count' ((countThresh ?~ mchan "s1a" !* float 0.05) .
                                     (countLimMax ?~ float 1) .
                                     (countLimType ?~ int 1)
                                    ) highv, count' ((countThresh ?~ mchan "s1b") .
                                     (countLimMax ?~ float 1) .
                                     (countLimType ?~ int 1)
                                    ) lowv, count' ((countThresh ?~ mchan "s1c" !* float 0.5) .
                                     (countLimMax ?~ float 1) .
                                     (countLimType ?~ int 1)
                                    ) volume])

let v3 (x, y, z) = (Just x, Just y, Just z)

let v2 (x, y) = (Just x, Just y)

r $ geoT emptyV3 (v3 (float 1.5, float 1.5, float 1.5)) (adata (float 1) & fade (float 0.96)) sphere

r . (\t -> (comp, t)) $ shapes (float 3) (float 0.1 !+ volc) (float 0.2) & repeatTxy (v2 (float 40) (float 40))

-- circle crosshatch
r $ addops [ addops [ adata (float 4)
                      & rotate (float (45))
                      & translatex (seconds !* float 0.2)
                      , adata (float 4)
                        & rotate (float (-45))
                      ]
                      & mirror
                      & noisedisplace (lowvc !* float 10)
                      & fade (float 0.7)
                      & palettemap buddhist (float 0)
                      & val ((lowvc !* float 0.9))
                    , shapes (float 2) ((float 0.8 !* volc) !+ float 0.1) (float 0.2 !+ (volc !* float (-0.2) ))
                      & translatey ((seconds !* float 0.3) !+ volc)
                      & littleplanet
                      & fade' id (repeatTxy (float 0.999)) (float 0.9)
                    ]

-- lumidots flocking

r $ flocking (float 1, float 3 !* volc) (float 3 !* volc)
              & fade ((volc !* float 0.85) !+ float 0.5)
              & mirror
              & edges
              & lumidots
              & noisedisplace (volc !* float 32)
              & val (volc !* float 4)
              & fade (float 0.8)


-- Cloned squares

r $ shapes (float 4) (float 0.2) (float 0.2)
  & translate (sincycle 0.7 0.5 !+ float 0.8, float 0.25)
  & clone (float 3) (float 0.2, float 0.1) (float (-0.2), float (-0.2))
  & val (float 0.7)
  & mirror
  & palettemap neon (float 0.5 !* seconds)

r $ adata (float 1)
  & littleplanet
  & fade' id (scalexy (float 1 !+ (float (-0.1) !* volc))) (float 0.98)
  & palettemap (Palette [RGB 63 124 7, RGB 201 121 66, RGB 213 101 23, RGB 177 201 80, RGB 180 207 127]) (float 0.4 !* seconds)


-- Fire circles

r $ addops [adata (float 0.3) & translatey (float (-0.2)), adata (float 0.3) & translatey (float 0.3)]
  & littleplanet
  & fade' id (scalexy (float 1 !+ (float (-0.1) !* volc))) (float 0.98)
  & palettemap fire (sincycle (-0.2) 1)
  & blur (float 8)
  & scalexy (float 0.7)
  & val (float 2)

-- Spiral hexes

r $ spiralGeo (int 100) seconds (sidesTorus (int 6) (float 2 !* lagmod 0.7 lowvc !+ float 0.5))
  & palettecycle neon (sincycle 1 0.4)
  & val (float 2.5)
  & mirror
  & fade (float 0.7)

-- octogon line

r $ lineLines (float 10) (float 2) (casti $ lowvc !* float 40) (sidesTorus (int 8) (float 0.1))
  & fade (float 0.8)
  & translate (float (-0.15), float 0.2)
  & transformT' ((transformExtend ?~ int 2) . (transformTranslate .~ (Just $ float 0.3 !* seconds, Just $ float 0)))
  & mirror
  & palettecycle fire (float 0.5)
  & fade (float 0.9)
  & val (float 4)

r . (\t -> (comp, t)) $ adata (float 1)
  & noisedisplace (lowvc !* float 100)
  & translatex (seconds !* float 0.1 !+ (volc !* float 2))
  & mirror
  & repeatTxy (float 3)
  & palettecycle buddhist (seconds !* float 0.3)
  & val (float 1.3)
  & fade' id (littleplanet . translate (float 0.1 !* seconds, float (0.01))) (float 0.97)
  & mirror
  & repeatTxy (float 0.7)

r . (\t -> (comp, t)) $ shapes (float 4) (float 0.2) (float 0.2)
  & translatey (seconds !* float (-0.4))
  & fade' id (repeatTxy (float 3)) (float 0.8)
  & palettemap buddhist (sincycle 0.7 0.3 !+ float 0)

let adatat x y = adata (float (y * 0.2)) & translatey (scycle x 1) & rotate (float (x * 30) !* seconds)

r $ addops [adatat 0.3 0.5, adatat 0.5 1, adatat 0.7 1.3, adatat 1.5 1.3]
  & fade (float 0.97)
  & palettemap buddhist (float 0.1 !* seconds)
  & val (float 0.3)
  & fade' id (scalexy (float 1 !+ (float (-0.02) !* volc))) (float 0.7)

r $ addops [adatat 0.4 0.2 , adatat 1.5 0.2]
  & translate (seconds !* float 0.1, float 0)
  & mirror
  & edges
  & val (float 0.5)
  & translate (seconds !* float 0.1, float 0)
  & littleplanet
  & translate (float 0.2 !* seconds, float 0.1)
  & mirror
  & palettecycle forest (sincycle 0.7 0.3 !+ float 0)
  & fade (float 0.9)
  & val (float 3)


r $ triggerops (tapbeat $ mchan "b9") [
  addops [adatat 0.3 0.5, adatat 0.5 1, adatat 0.7 1.3, adatat 1.5 1.3]
  & fade (float 0.97)
  & palettemap buddhist (float 0.1 !* seconds)
  & val (float 0.3)
  & fade' id (scalexy (float 1 !+ (float (-0.02) !* volc))) (float 0.7)
  , shapes (float 3) (float 0.3) (float 0.3)
  & fade (float 0.95)
  & repeatTxy (float 30)
  & translatex (seconds !* float 0.1)
  ]

r $ addops [adatat 0.3 0.5 & rotate (float 45), adatat 0.5 0.5 & rotate (float (-45)), adatat 1.5 0.5]
  & repeatTxy (float 10 !* lmf 0 "y")
  & translatex (lmf 0 "x")
  & fade (float 0.9)
  & palettemap neon (sincycle 0.05 1)
  & val (float 0.2)
  & fade (float 0.8)

r $ shapes (float 3) (float 0.2 !+ lmp 0 "ty") (lmp 0 "ry" !* float 0.035)
  & fade (lmp 1 "ty" !* float 10)

r $ sphereNoise

let adatat x y = adata (float y) & translatey (float x !* float 0.5)

r . (\t -> (comp, t)) $ addops [ adatat 0.3 0.5 & palettecycle buddhist (sincycle 0.4 1)
           , adatat 0 1 & palettecycle neon (seconds !* float 0.3)
           , adatat 0.6 1.3 & mosaic seconds (float 60)
           ]
  & littleplanet
  & scalexy (float 0.5)
  & fade (float 0.95)

r $ addops [ adata (float 1) & translatey (float 0.3) & littleplanet & translatex (float 0.2) & translatey (float 0.2)
           , adata (float 1) & littleplanet & translatex (seconds !* float (-0.2))
           , adata (float 1) & littleplanet & translatex (float (0.2)) & translatey (seconds !* float (-0.2))
           ]
  & palettecycle neon (seconds !* float 0.5)
  & fade' id ((scalexy (float (0.04) !* volc)) . (translatey (float 0.01))) (float 0.95)
  & translatex (seconds !* float 0.2)
  & mirror

r $ addops [adata (float 1) & repeatTxy (float 2), adata (float 1) & repeatTxy (float 2) & rotate (float 90)]
  & rotate (mchan "b1" !* float 45)
  & translate (float 0, float 0)
  & fade' id ((scalexy (float (0.05) !* lowvc)) . (translatey (float (0.005)))) (float 0.5 !+ (float 0.5 !* mchan "s1"))
  & sat (float 1.1)
  & val (float 1.8)


let adatat x y = adata (float y) & translatey (scycle x 1)

r $ shapes (float 2 !+ (float 10 !* volc)) (float 0.6 !* volc) (float 0.3)
  & repeatTxy ((sincycle (-0.3) 15 !+ float 1) !+ (volc !* float 4))
  & rotate (float 60 !* seconds)
  & palettecycle neon (seconds !* float 0.3)
  & fade (float 0.9)
  & translatex ((seconds !* float 0.2))
  & mirror



let churchmap = movie (float 0) "church.png" & transformT' ((transformExtend ?~ int 2) . (transformTranslate .~ (Just $ float 0.002, Just $ float (-0.04))))



r $ multops
    [ churchmap & blur (float 4) & val (float 4)
    , flocking (float 0.5, float 4) (float 3.1) & fade (float 0.95)
    ]
  & palettecycle neon
  & fade' id (scalexy (lowvc !* float 0.04)) (float 0.93)
  & val (float 10)

r $ adata (float 1)
  & val (float 0)

r $ movie ((lowvc !+ seconds) !* float 30 !+ float 1800) "highway.mp4" & edges & val (mchan "b1")
  

r $ addops [movie (float 60 !+ (lowvc !* float 300)) "Purple flowers.mp4"
  & edges
  & mirror
  & fade (mchan "s1")
  , adata (float 1) & palettecycle fire & translate (Just $ float 0, Just $ float 0.5) & val (mchan "b1")
    & fade' id (scalexy (float (-0.02) !* lowvc)) (lowvc !* float 2)
  ]

-- Purple flowers bass start

r $ movie (float 60 !+ (lowvc !* float 360)) "Purple flowers.mp4"
  & fade (volc !* float 5)

-- abstract adata rotating

let
  adatat x y = adata (float (y * 0.2)) & translatey (scycle x 1) & rotate (float (x * 180) !* seconds)
in 
  r $ addops [adatat 0.3 0.5, adatat 0.5 1, adatat 0.7 1.3, adatat 1.5 1.3]
    & fade (float 0.97)
    & palettemap nature (volc !* float 10)
    & val (seconds !% float 1)
    & fade' id (scalexy (float 0.02 !* volc !+ float 1)) (float 0.7)

-- chaos adata

r $ adata (float 1)
  & noisedisplace (lowvc !* float 100)
  & translatex (seconds !* float 0.1 !+ (volc !* float 2))
  & mirror
  & repeatTxy (float 3)
  & palettecycle buddhist (seconds !* float 0.3)
  & val (float 1.3)
  & fade' id (littleplanet . translate (float 0.1 !* seconds, float (0.01))) (float 0.97)
  & mirror
  & scalexy (float 0.7)

-- up fade

r $ addops [adata (float 1)
  & littleplanet, 
    adata (float 1)
      & translatey (float 0)
      & rotate (float 0)
    ]
  & val (lowvc !* float (4))
  & translatey (float (-0.2))
  & scalexy (float 0.4)
  & fade' id (scalexy (float 1 !- (volc !* float (-0.04))) . translatey (float 0.02)) (float 0.99)
  & palettemap neon ((volc !* float 0.3) !+ (seconds !* float 0.4))
  & val (float 0.4)
  & fade (float 0.7)

r $ flocking (float 1, float 3 !* volc) (float 3 !* volc)
    & fade (float 0.95)
    & noisedisplace (volc !* float 16)
    & palettemap neon (seconds !* float 0.6)
    & val (volc !* float 4)
    & fade (float 0.8)


r $ multops [ stringtheory (volc !* float 0.4) (volc)
              & edges
              & translatex (seconds !* float 0.2)
              & repeatTxy (float 3)
              & fade (float 0.95 !+ (lowvc !* float (-0.2)))
              & translatey (seconds !* float 0.3)
              & littleplanet
              & scalexy (float 0.7)
            , lines (float 0.4 !* volc) (float 0.2)
              & fade (float 0.95)
              & translatex (seconds !* float 0.2)
              & mirror
            ]

r $ addops [ adata (float 0.5)
             & translatey (volc !* float 0.6)
             & rotate (float 45)
             & mirror
             & val (float 1.5)
             & rotate (float 45 !* seconds)
             & scalexy (float 0.7)
             & palettecycle buddhist (seconds !* float 0.4)
             & fade (float 0.97)
             & val (float 1 !+ (volc !* float (-1.5)))
           , flocking (float 0.5, float 4 !* volc) (float 0.5)
             & fade (float 0.8 !* volc !+ float 0.3)
             & palettemap buddhist ((seconds !* float 0.4) !+ float 0.5)
             & val (volc !* float 3)
           ]